name: Release New

permissions:
  contents: write

on:
  workflow_run:
    workflows: ["Update Version and Create Tag"]
    types:
      - completed
    conclusions:
      - success

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.determine.outputs.tag }}
      pre_release: ${{ steps.determine.outputs.pre_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine tag and pre-release status
        id: determine
        shell: bash
        run: |
          # Get the last tag
          TAG_NAME=$(git describe --tags --abbrev=0)
          echo "TAG_NAME is $TAG_NAME"
          # Determines if the tag matches a pre-release
          if [[ "$TAG_NAME" == *"alpha"* || "$TAG_NAME" == *"beta"* || "$TAG_NAME" == *"rc"* ]]; then
            PRE_RELEASE=true
          else
            PRE_RELEASE=false
          fi
          echo "Determined pre_release: $PRE_RELEASE"
          # Defines the outputs of the job for reuse in the job build
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ steps.determine.outputs.tag }}
          name: "Release ${{ steps.determine.outputs.tag }}"
          prerelease: ${{ steps.determine.outputs.pre_release }}

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: mac-intel
          - os: macos-14
            platform: mac-arm
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 1000000

      - name: Create .env file
        run: |
          echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" > .env

      - name: Install ImageMagick (Windows)
        if: runner.os == 'Windows'
        run: choco install imagemagick --version=7.0.11-1 -y

      - name: Install ImageMagick (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y imagemagick

      - name: Install ImageMagick (macOS)
        if: runner.os == 'macos-latest' || runner.os == 'macos-14'
        run: brew install imagemagick

      - name: Build project (Windows)
        if: runner.os == 'Windows'
        run: yarn electron:build --windows
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

      - name: Build project (macOS Intel)
        if: matrix.platform == 'mac-intel'
        run: yarn electron:build --mac --config electron-builder.x64.json
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build project (macOS ARM)
        if: matrix.platform == 'mac-arm'
        run: yarn electron:build --mac --config electron-builder.arm64.json
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build project (Linux)
        if: runner.os == 'Linux'
        run: yarn electron:build --linux
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.tar.xz
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
